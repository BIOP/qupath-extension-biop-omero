plugins {
  id 'java-library'
  // To create a shadow/fat jar, including dependencies
  id 'com.github.johnrengelman.shadow' version '7.0.0'
  // Reduce JavaCPP dependencies
}

ext.moduleName = 'qupath.extension.biop.omero'
archivesBaseName = 'qupath-extension-biop-omero'
description = "QuPath extension to support image reading using OMERO's Java API."
version = "0.1.4-SNAPSHOT"

repositories {
//  mavenLocal()
  mavenCentral()

  maven {
    url "https://maven.scijava.org/content/repositories/releases"
  }
  maven {
    url "https://maven.scijava.org/content/repositories/snapshots"
  }
  maven{
        url "https://maven.scijava.org/content/groups/public"
  }
    maven{
        url "https://artifacts.igred.fr/releases"
   }
}

configurations {
    implementation.extendsFrom bioformats

}

dependencies {
    def qupathVersion = "0.3.0" // For now

    implementation "org.apache.commons:commons-text:1.9"

    implementation "io.github.qupath:qupath-core:$qupathVersion"
    shadow "io.github.qupath:qupath-gui-fx:$qupathVersion"

    //shadow "org.slf4j:slf4j-api:1.7.30"
    implementation "commons-io:commons-io:2.11.0"

    testImplementation "io.github.qupath:qupath-gui-fx:$qupathVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    implementation "com.zeroc:glacier2:3.6.5"
    implementation "com.zeroc:ice:3.6.5"
    implementation "org.openmicroscopy:ome-xml:6.1.0"
    implementation "org.openmicroscopy:omero-blitz:5.5.8"
    implementation "org.openmicroscopy:omero-gateway:5.6.5"
    implementation "org.openmicroscopy:omero-model:5.6.0"
    implementation "info.picocli:picocli:4.3.2"
    shadow "fr.igred:simple-omero-client:5.9.1"
}

processResources {
  from ("${projectDir}/LICENSE.txt") {
    into 'licenses/'
  }
}

tasks.register("copyDependencies", Copy) {
  description "Copy dependencies into the output libs directory"
  group "QuPath"
  
  from configurations.default
  into 'build/libs'
}

java {
    def version = project.findProperty('toolchain')
    if (!version)
        version = 11
    else if (version.strip() == 'skip')
        version = null
    if (version != null) {
        logger.quiet("Setting toolchain to {}", version)
        toolchain {
            languageVersion = JavaLanguageVersion.of(version)
        }
    }
}


jar {
    // Important to set version so this can be queried within QuPath
    manifest {
        def manifestAttributes = [
                "Implementation-Vendor": "QuPath developers",
                "Implementation-Version": project.version,
                //               'Automatic-Module-Name': "io.github." + moduleName,
                "QuPath-build-time": new Date().format("yyyy-MM-dd, HH:mm")
        ]

        attributes(manifestAttributes)
    }
}